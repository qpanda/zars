<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by TaglibToXSD. + Mark A. Ziesemer, http://www.ziesemer.com + 2008-03-25 --><xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0" xml:lang="en"
           elementFormDefault="qualified"
           targetNamespace="http://primefaces.prime.com.tr/ui">
   <xs:annotation>
      <xs:documentation/>
      <xs:documentation>tlib-version: 1.2</xs:documentation>
   </xs:annotation>
   <xs:element name="dataExporter">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.export.DataExporterTag</xs:documentation>
         <xs:documentation>body-content: empty</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="target" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Server side of the datatable to be exported]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="type" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Type of the format, could be xls, pdf, xls, xml]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="fileName" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the exported file]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pageOnly">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean for only exporting the current displayed page]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="excludeColumns">
            <xs:annotation>
               <xs:documentation><![CDATA[Comma seperated list of columns to be neglected]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="encoding">
            <xs:annotation>
               <xs:documentation><![CDATA[Character encoding to use in exporting the document.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="preProcessor">
            <xs:annotation>
               <xs:documentation><![CDATA[Pre hook to manipulate exported document.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="postProcessor">
            <xs:annotation>
               <xs:documentation><![CDATA[Post hook to manipulate exported document.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="collector">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.collector.CollectorTag</xs:documentation>
         <xs:documentation>body-content: empty</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="value" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Value to used in collection operation.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="addTo">
            <xs:annotation>
               <xs:documentation><![CDATA[A collection to add the value.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="removeFrom">
            <xs:annotation>
               <xs:documentation><![CDATA[A collection to remove the value from.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="fileDownload">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.filedownload.FileDownloadTag</xs:documentation>
         <xs:documentation>body-content: empty</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="value" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="contentDisposition">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the content-disposition header .]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="accordionPanel">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.accordionpanel.AccordionPanelTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="activeIndex">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the active tab.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the root container of accordion panel]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the root container of accordion panel]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables or enables accordion]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Effect to use when toggling the content]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="autoHeight">
            <xs:annotation>
               <xs:documentation><![CDATA[When enabled, highest content is used as the reference. Provides more consistent animations.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collapsible">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if accordion can be collapsed all together.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="fillSpace">
            <xs:annotation>
               <xs:documentation><![CDATA[When enabled, accordion fills the height of it's parent.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="event">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the event to use to toggle a tab.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="ajax">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.uiajax.UIAjaxTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="async">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, ajax requests will not be queued.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="event">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event to trigger the ajax request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="process">
            <xs:annotation>
               <xs:documentation><![CDATA[Comma seperated list of clientIds that will be processed partially in JSF lifecycle instead of the whole component tree.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="actionListener">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="action">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onstart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called before ajax request begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onerror">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request fails.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onsuccess">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request succeeds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="global">
            <xs:annotation>
               <xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="ajaxStatus">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.ajaxstatus.AjaxStatusTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the client side widget variable.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onstart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event listener to called after an ajax request starts.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event listener to be called when an ajax request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onprestart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event listener to be called before an ajax request is started.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onsuccess">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event listener to be called when an ajax request returns success.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onerror">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event listener to be called when an ajax request returns error.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the parent element containing the facets.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the parent element containing the facets.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="autoComplete">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.autocomplete.AutoCompleteTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="completeMethod">
            <xs:annotation>
               <xs:documentation><![CDATA[Method to be called to fetch the suggestions]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var">
            <xs:annotation>
               <xs:documentation><![CDATA[Variable name of the iterator.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the item.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemValue">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the item.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxResults">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum number of results to be displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minQueryLength">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of characters to be typed before starting to query.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="queryDelay">
            <xs:annotation>
               <xs:documentation><![CDATA[Delay to wait in milliseconds before sending each query to the server.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="forceSelection">
            <xs:annotation>
               <xs:documentation><![CDATA[When enabled, autocomplete only accepts values from the suggestion list.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="selectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Server side listener to invoke when a suggested item is selected.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onSelectUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Component(s) to update with ajax after a suggested item is selected.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onstart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called before ajax request to load items begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called after ajax request to load items completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables the calendar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="barChart">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.chart.bar.BarChartTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Data to be displayed on the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the data iterator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="yfield">
            <xs:annotation>
               <xs:documentation><![CDATA[Field for the y axis]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to chart container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript object that represents the chart style]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="wmode">
            <xs:annotation>
               <xs:documentation><![CDATA[wmode property of the flash object.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="live">
            <xs:annotation>
               <xs:documentation><![CDATA[When a chart is live, the data is refreshed based on the refreshInterval]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event to be called when ajax request for item select event is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="refreshInterval">
            <xs:annotation>
               <xs:documentation><![CDATA[Refresh period of a live chart data in milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen chart series item select events]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minX">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum boundary value of x axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxX">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum boundary value of x axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="titleX">
            <xs:annotation>
               <xs:documentation><![CDATA[Title of the x-axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="titleY">
            <xs:annotation>
               <xs:documentation><![CDATA[Title of the y-axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="labelFunctionX">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function to format x-axis labels.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="labelFunctionY">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function to format y-axis labels.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dataTipFunction">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function name to customize the data tips.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="breadCrumb">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.breadcrumb.BreadCrumbTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="model">
            <xs:annotation>
               <xs:documentation><![CDATA[An org.primefaces.model.MenuModel instance to build menu dynamically.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expandedEndItems">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of expanded menuitems at end.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expandedBeginningItems">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of expanded menuitems at beginning.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expandEffectDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Expand effect duration in milliseconds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collapseEffectDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Collapse effect duration in milliseconds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="initialCollapseEffectDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Initial collapse effect duration in milliseconds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="previewWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Preview width of a collapsed menuitem.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="preview">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies preview mode, when set to false menuitems will not collapse.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="calendar">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.calendar.CalendarTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="mindate">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets calendar's minimum visible date. Can be java.lang.String or java.util.Date. If String, mindate will be parsed with the format "MM/dd/yyyy".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets calendar's maximum visible date. Can be java.lang.String or java.util.Date. If String, maxdate will be parsed with the format "MM/dd/yyyy".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pages">
            <xs:annotation>
               <xs:documentation><![CDATA[Enables multiple page rendering if more than 1, default value is 1.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables the calendar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="mode">
            <xs:annotation>
               <xs:documentation><![CDATA[inline|popup, Defines how the calendar will be displayed; "inline" only displays a calendar,
				"popup" displays an input text and a popup button]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pattern">
            <xs:annotation>
               <xs:documentation><![CDATA[DateFormat pattern, default is "MM/dd/yyyy"]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="locale">
            <xs:annotation>
               <xs:documentation><![CDATA[Locale for localization and date conversion, can be String or a java.util.Locale instance.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="popupIcon">
            <xs:annotation>
               <xs:documentation><![CDATA[Icon of the popup button]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="popupIconOnly">
            <xs:annotation>
               <xs:documentation><![CDATA[When enabled, popup icon is rendered without the button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="navigator">
            <xs:annotation>
               <xs:documentation><![CDATA[Enables month/year navigator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="timeZone">
            <xs:annotation>
               <xs:documentation><![CDATA[String or a java.util.TimeZone instance to specify the timezone used for date conversion, defaults to TimeZone.getDefault()]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="readOnlyInputText">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes input text of a popup calendar readonly.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onSelectUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the components to update with ajax when a date is selected.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="selectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to invoke instantly with ajax when a date is completed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of calendar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of calendar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="inputStyle">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the input text of popup display.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="inputStyleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the input text of popup display.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showButtonPanel">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the visibility of button panel that contains today and done buttons.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the effect to use when displaying and hiding the calendar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the speed of the display effect used.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showOn">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the event to display the overlay in popup mode, valid values are "focus", "button" and "both".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showWeek">
            <xs:annotation>
               <xs:documentation><![CDATA[When enabled, week number of year is displayed next to each week.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showOtherMonths">
            <xs:annotation>
               <xs:documentation><![CDATA[When enabled, days belonging to other months are displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="selectOtherMonths">
            <xs:annotation>
               <xs:documentation><![CDATA[When enabled, days belonging to other months become selectable.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="captcha">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.captcha.CaptchaTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="publicKey">
            <xs:annotation>
               <xs:documentation><![CDATA[Public recaptcha key for a specific domain]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="theme">
            <xs:annotation>
               <xs:documentation><![CDATA[Theme of the captcha, valid values are "red","white","blackglass", "clean" and "custom"]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="language">
            <xs:annotation>
               <xs:documentation><![CDATA[Key of the supported languages, default is "en"]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tabindex">
            <xs:annotation>
               <xs:documentation><![CDATA[TabIndex value of the captcha]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="carousel">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.carousel.CarouselTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the request-scoped variable that'll be used as the holder of each rowdata before processing a row]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rows">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of rows to display per page]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="first">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the first row to be displayed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="scrollIncrement">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of items to scroll]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="circular">
            <xs:annotation>
               <xs:documentation><![CDATA[When true, enables continous scrolling, default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="vertical">
            <xs:annotation>
               <xs:documentation><![CDATA[Set vertical orientation, default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="autoPlayInterval">
            <xs:annotation>
               <xs:documentation><![CDATA[Set this time in milli-seconds to have the Carousel scroll the elements automatically]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="revealAmount">
            <xs:annotation>
               <xs:documentation><![CDATA[The percentage of the item to be revealed on each side of the Carousel]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="animate">
            <xs:annotation>
               <xs:documentation><![CDATA[When enabled scrolling is animated, animation is turned on by default]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="speed">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the speed of the scrolling animation, default is 0.5]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the animation effect]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pagerPrefix">
            <xs:annotation>
               <xs:documentation><![CDATA[Prefix text of the pager dropdown]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemStyle">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of each item container.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemStyleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of each item container.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="chartSeries">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.chart.series.ChartSeriesTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="label" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of series]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript object that represents the series style]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="colorPicker">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.colorpicker.ColorPickerTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="header">
            <xs:annotation>
               <xs:documentation><![CDATA[Header text for the color picker title.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showControls">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets visibility of whole set of controls.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showHexControls">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets visibility of hex controls.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showHexSummary">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets visibility of hex summary.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showHsvControls">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets visibility of hsv controls.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showRGBControls">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets visibility of rgb controls.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showWebSafe">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets visibility of web safe controls.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="column">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.column.ColumnTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sortBy">
            <xs:annotation>
               <xs:documentation><![CDATA[Property to be used when sorting this column either on client side or server side with ajax.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="resizable">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean to make the column width resizable, default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="parser">
            <xs:annotation>
               <xs:documentation><![CDATA[Type of parser used to identify the type of data presented in the column.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of column in pixels.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the column.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sortFunction">
            <xs:annotation>
               <xs:documentation><![CDATA[Custom pluggable sort function, for dynamic data it refers to a methodexpression and for non-dynamic data it must be a javascript method.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="filterBy">
            <xs:annotation>
               <xs:documentation><![CDATA[Property to be used when sorting this column either on client side or server side with ajax.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="filterStyle">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the input text filter.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="filterStyleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the input text filter.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="filterEvent">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the input text filter.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="columnChart">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.chart.column.ColumnChartTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Data to be displayed on the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the data iterator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="xfield">
            <xs:annotation>
               <xs:documentation><![CDATA[Field for the x axis]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to chart container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript object that represents the chart style]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="wmode">
            <xs:annotation>
               <xs:documentation><![CDATA[wmode property of the flash object.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="live">
            <xs:annotation>
               <xs:documentation><![CDATA[When a chart is live, the data is refreshed based on the refreshInterval]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event to be called when ajax request for item select event is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="refreshInterval">
            <xs:annotation>
               <xs:documentation><![CDATA[Refresh period of a live chart data in milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen chart series item select events]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minY">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum boundary value of y axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxY">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum boundary value of y axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="titleX">
            <xs:annotation>
               <xs:documentation><![CDATA[Title of the x-axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="titleY">
            <xs:annotation>
               <xs:documentation><![CDATA[Title of the y-axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="labelFunctionX">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function to format x-axis labels.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="labelFunctionY">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function to format y-axis labels.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dataTipFunction">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function name to customize the data tips.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="commandButton">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.commandbutton.CommandButtonTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="actionListener">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="action">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ajax">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the submit mode, when set to true(default), submit would be made with Ajax.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="async">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, ajax requests will not be queued.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="process">
            <xs:annotation>
               <xs:documentation><![CDATA[Comma seperated list of clientIds that will be processed partially in JSF lifecycle instead of the whole component tree.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onstart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called before ajax request begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onerror">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request fails.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onsuccess">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request succeeds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="global">
            <xs:annotation>
               <xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="accesskey">
            <xs:annotation>
               <xs:documentation><![CDATA[Html accesskey attribute.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alt">
            <xs:annotation>
               <xs:documentation><![CDATA[Html alt property.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dir">
            <xs:annotation>
               <xs:documentation><![CDATA[Html dir attribute.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables the button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="image">
            <xs:annotation>
               <xs:documentation><![CDATA[Image of the button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="label">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lang">
            <xs:annotation>
               <xs:documentation><![CDATA[Html lang attribute.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tabindex">
            <xs:annotation>
               <xs:documentation><![CDATA[Html tabindex attribute.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Html title attribute.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="type">
            <xs:annotation>
               <xs:documentation><![CDATA[Type of button like "submit", "reset", "image", "button".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="readonly">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes button readonly.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class to apply.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onblur">
            <xs:annotation>
               <xs:documentation><![CDATA[onblur dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onchange">
            <xs:annotation>
               <xs:documentation><![CDATA[onchange dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[onclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ondblclick">
            <xs:annotation>
               <xs:documentation><![CDATA[ondblclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onfocus">
            <xs:annotation>
               <xs:documentation><![CDATA[onfocus dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeydown">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeydown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeypress">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeypress dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeyup">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeyup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousedown">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousedown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousemove">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousemove dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseout">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseout dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseover">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseover dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseup">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselect">
            <xs:annotation>
               <xs:documentation><![CDATA[onselect dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="commandLink">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.commandlink.CommandLinkTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="actionListener">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="action">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ajax">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the submit mode, when set to true(default), submit would be made with Ajax.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="async">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, ajax requests will not be queued.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="process">
            <xs:annotation>
               <xs:documentation><![CDATA[Comma seperated list of clientIds that will be processed partially in JSF lifecycle instead of the whole component tree.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onstart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called before ajax request begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onerror">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request fails.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onsuccess">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request succeeds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="global">
            <xs:annotation>
               <xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="accesskey">
            <xs:annotation>
               <xs:documentation><![CDATA[Html accesskey attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="charset">
            <xs:annotation>
               <xs:documentation><![CDATA[Html chartset attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="coords">
            <xs:annotation>
               <xs:documentation><![CDATA[Html coords attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dir">
            <xs:annotation>
               <xs:documentation><![CDATA[Direction of the text displayed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Flag to disable the link.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="hreflang">
            <xs:annotation>
               <xs:documentation><![CDATA[Html hreflang attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rel">
            <xs:annotation>
               <xs:documentation><![CDATA[Html rel attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rev">
            <xs:annotation>
               <xs:documentation><![CDATA[Html rev attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="shape">
            <xs:annotation>
               <xs:documentation><![CDATA[Html shape attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tabindex">
            <xs:annotation>
               <xs:documentation><![CDATA[Html tabindex attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="target">
            <xs:annotation>
               <xs:documentation><![CDATA[Html target attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Html title attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="type">
            <xs:annotation>
               <xs:documentation><![CDATA[Html type attribute for anchor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to the anchor element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class to apply to the anchor element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onblur">
            <xs:annotation>
               <xs:documentation><![CDATA[onblur dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[onclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ondblclick">
            <xs:annotation>
               <xs:documentation><![CDATA[ondblclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onfocus">
            <xs:annotation>
               <xs:documentation><![CDATA[onfocus dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeydown">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeydown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeypress">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeypress dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeyup">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeyup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousedown">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousedown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousemove">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousemove dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseout">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseout dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseover">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseover dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseup">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="confirmDialog">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.confirmdialog.ConfirmDialogTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="message" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[The text displayed in the dialog]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="header">
            <xs:annotation>
               <xs:documentation><![CDATA[The text displayed in the dialog's header part]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="severity">
            <xs:annotation>
               <xs:documentation><![CDATA[Icon for the severity of the message]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="draggable">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value whether to allow the user to drag the Panel using its header.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="modal">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies whether the document should be
				shielded with a partially transparent mask to require the user
				to close the Panel before being able to activate any elements in
				the document.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the element in pixels]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the element in pixels]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="zindex">
            <xs:annotation>
               <xs:documentation><![CDATA[zindex property to control overlapping with other elements]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of dialog.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showEffect">
            <xs:annotation>
               <xs:documentation><![CDATA[Effect to use when showing the dialog]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="hideEffect">
            <xs:annotation>
               <xs:documentation><![CDATA[Effect to use when hiding the dialog]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="position">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines where the dialog should be displayed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closeOnEscape">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if dialog should be closed when escape key is pressed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closable">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if close icon should be displayed or not]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="contextMenu">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.contextmenu.ContextMenuTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="for">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component to attach the context menu.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="dashboard">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.dashboard.DashboardTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="model">
            <xs:annotation>
               <xs:documentation><![CDATA[Dashboard model representing the layout of the UI]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables changing of layout]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onReorderUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update after ajax reorder event is processed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="reorderListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to invoke when dashboard widgets are reordered.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of dashboard.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of dashboard.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="dataGrid">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.datagrid.DataGridTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the request-scoped variable that'll be used as the holder of each rowdata before processing a row]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rows">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of rows to display per page]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="first">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the first row to be displayed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="columns">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of columns to display]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginator">
            <xs:annotation>
               <xs:documentation><![CDATA[Enables paginator, default value is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginatorTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template for the paginator layout, default value is "{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink}"]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rowsPerPageTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template for the rowsPerPage dropdown]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="currentPageReportTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template for the {currentPageReport} UI.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pageLinks">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of pageLinks to display when paginator is enabled, defaults to 10 at most.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="firstPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the first link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="previousPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the previous link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="nextPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the next link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lastPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the last link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginatorPosition">
            <xs:annotation>
               <xs:documentation><![CDATA[Position of the paginator, valid values are "both","top","bottom".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginatorAlwaysVisible">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if paginator should be hidden when number of rows displayed is less than paginator rowsPerPage option.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="page">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the current page, first page is 1.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Enabled fade effect during pagination.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed of the fade effect during pagination.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of datagrid.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of datagrid.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="dataList">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.datalist.DataListTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the request-scoped variable that'll be used as the holder of each rowdata before processing a row]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rows">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of rows to display per page]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="first">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the first row to be displayed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="type">
            <xs:annotation>
               <xs:documentation><![CDATA[Type of the list, valid values are "unordered"(default), "ordered" and "definition".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemType">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies how items would be displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginator">
            <xs:annotation>
               <xs:documentation><![CDATA[Enables paginator, default value is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginatorTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template for the paginator layout, default value is "{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink}"]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rowsPerPageTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template for the rowsPerPage dropdown]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="currentPageReportTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template for the {currentPageReport} UI.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pageLinks">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of pageLinks to display when paginator is enabled, defaults to 10 at most.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="firstPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the first link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="previousPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the previous link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="nextPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the next link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lastPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the last link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginatorPosition">
            <xs:annotation>
               <xs:documentation><![CDATA[Position of the paginator, valid values are "both","top","bottom".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginatorAlwaysVisible">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if paginator should be hidden when number of rows displayed is less than paginator rowsPerPage option.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="page">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the current page, first page is 1.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Enabled fade effect during pagination.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed of the fade effect during pagination.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of datagrid.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of datagrid.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="dataTable">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.datatable.DataTableTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the request-scoped variable that'll be used as the holder of each rowdata before processing a row]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rows">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of rows to display per page]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="first">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the first row to be displayed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginator">
            <xs:annotation>
               <xs:documentation><![CDATA[Enables paginator, default value is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginatorTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template for the paginator layout, default value is "{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink}"]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rowsPerPageTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template for the rowsPerPage dropdown, default value is "25,50,100"]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="currentPageReportTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template for the {currentPageReport} UI.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginatorAlwaysVisible">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if paginator should be hidden when number of rows displayed is less than paginator rowsPerPage option.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="scrollable">
            <xs:annotation>
               <xs:documentation><![CDATA[Controls scrolling, default value is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of a scrollable datatable]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of a scrollable datatable]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="firstPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the first link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="previousPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the previous link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="nextPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the next link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lastPageLinkLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the last link paginator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="selectionMode">
            <xs:annotation>
               <xs:documentation><![CDATA[Type for row click selection, can be 'multiple', 'single', 'cellblock', 'cellrange' and 'singlecell';]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="selection">
            <xs:annotation>
               <xs:documentation><![CDATA[An object array that'll be used to assign the selected data.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dynamic">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true sorting and paging will be done on server via ajax, default is false meaning sorting-paging is done on client side.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lazy">
            <xs:annotation>
               <xs:documentation><![CDATA[Controls lazy loading.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rowIndexVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Variable name referring to the rowIndex being processed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="paginatorPosition">
            <xs:annotation>
               <xs:documentation><![CDATA[Position of the paginator, valid values are "both","top","bottom".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="emptyMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be shown when there're no records to display.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="errorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be shown when there's an error loading the data.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="loadingMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be shown when loading the data with ajax.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sortAscMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be shown to sort a column data in ascending order.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sortDescMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be shown to sort a column data in descending order.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after ajax row selection.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container element of table.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[StyleClass of the main container element of table.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselectStart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called before ajax request for instant ajax row selection request begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselectComplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called after ajax request for instant ajax row selection request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dblClickSelect">
            <xs:annotation>
               <xs:documentation><![CDATA[By default single click triggers row selection feature, setting dblClickSelect enabled double click requirement for row selection.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="page">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the current page, first page is 1.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pageLinks">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of pageLinks to display when paginator is enabled, defaults to 10.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="dialog">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.dialog.DialogTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="header">
            <xs:annotation>
               <xs:documentation><![CDATA[Header text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="draggable">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value whether to allow the user to drag the Panel using its header.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="resizable">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes the dialog resizable.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="modal">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies whether the document should be
				shielded with a partially transparent mask to require the user
				to close the Panel before being able to activate any elements in
				the document.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="visible">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, dialog is visible by default.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the element in pixels]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the element in pixels]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="zindex">
            <xs:annotation>
               <xs:documentation><![CDATA[zindex property to control overlapping with other elements]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum width of a resizable dialog.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minHeight">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum height of resizable dialog.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of dialog.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to process a CloseEvent]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onCloseUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update after ajax closeListener is processed and dialog is closed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showEffect">
            <xs:annotation>
               <xs:documentation><![CDATA[Effect to use when showing the dialog]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="hideEffect">
            <xs:annotation>
               <xs:documentation><![CDATA[Effect to use when hiding the dialog]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="position">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines where the dialog should be displayed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closeOnEscape">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if dialog should be closed when escape key is pressed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closable">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if close icon should be displayed or not]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="dock">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.dock.DockTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="model">
            <xs:annotation>
               <xs:documentation><![CDATA[An org.primefaces.model.MenuModel instance to build menu dynamically.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="position">
            <xs:annotation>
               <xs:documentation><![CDATA[Position of the panel: top | bottom.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Initial width of the items in pixels.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum width of the items in pixels.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="proximity">
            <xs:annotation>
               <xs:documentation><![CDATA[Distance when will items start to enlarge.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="halign">
            <xs:annotation>
               <xs:documentation><![CDATA[Horizontal alignment of doc.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="draggable">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.dnd.DraggableTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="proxy">
            <xs:annotation>
               <xs:documentation><![CDATA[Uses a proxy element for dragging.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dragOnly">
            <xs:annotation>
               <xs:documentation><![CDATA[Disabled dropping, just for movement.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="for">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component to add draggable behavior]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables or enables dragging]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="axis">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies drag axis, possible values are x and y]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="containment">
            <xs:annotation>
               <xs:documentation><![CDATA[Constrains dragging within the boundaries of containment element]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="helper">
            <xs:annotation>
               <xs:documentation><![CDATA[Helper element to display when dragging]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="revert">
            <xs:annotation>
               <xs:documentation><![CDATA[Reverts draggable to it's original position when not dropped onto a droppable]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="snap">
            <xs:annotation>
               <xs:documentation><![CDATA[Draggable will snap to edge of the near elements]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="snapMode">
            <xs:annotation>
               <xs:documentation><![CDATA[Draggable will snap to edge of the near elements]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="snapTolerance">
            <xs:annotation>
               <xs:documentation><![CDATA[Distance from the snap element in pixels to trigger snap]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="zindex">
            <xs:annotation>
               <xs:documentation><![CDATA[zindex to apply during dragging]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="handle">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies a handle for draggable]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="opacity">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines the opacity of helper]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="stack">
            <xs:annotation>
               <xs:documentation><![CDATA[In stack mode, draggables overlap is controlled automatically, dragged item always overlays other draggables.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="grid">
            <xs:annotation>
               <xs:documentation><![CDATA[Dragging happens in every x and y pixels in a grid.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="scope">
            <xs:annotation>
               <xs:documentation><![CDATA[Scope key to match draggables and droppables.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="cursor">
            <xs:annotation>
               <xs:documentation><![CDATA[CSS cursor during dragging.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dashboard">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the dashboard to connect draggable to.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="droppable">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.dnd.DroppableTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="for">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component to add droppable behavior]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables or enables drop behavior]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="hoverStyleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class to apply when an acceptable draggable is dragged over.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="activeStyleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class to apply when an acceptable draggable is dropped.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onDropUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Component(s) to update with ajax after a draggable is dropped]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dropListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to process a DragDrop event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onDrop">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to invoke when a draggable is dropped]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="accept">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines the type of draggables that can be dropped]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="scope">
            <xs:annotation>
               <xs:documentation><![CDATA[Scope key to match draggables and droppables.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tolerance">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the mode to accept a droppable.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="editor">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.editor.EditorTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the editor]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the editor]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="resizable">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes editor resizable]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="language">
            <xs:annotation>
               <xs:documentation><![CDATA[Language of the texts displayed on editor, default is English(en).]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Title text of the editor, defaults to "Text Editing Tools".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables the editor.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="effect">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.effect.EffectTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="event" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Dom event to attach the event that executes the animation]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="type" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the name of the animation]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="for">
            <xs:annotation>
               <xs:documentation><![CDATA[Optional, the component that is animated.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="speed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed of the animation in ms]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="fileUpload">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.fileupload.FileUploadTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after file upload completes.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="fileUploadListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen file upload events.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="multiple">
            <xs:annotation>
               <xs:documentation><![CDATA[Allows for multiple file uploads, default is set to false.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="auto">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true selecting a file starts the upload implicitly.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="label">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the browse button, default is 'Browse'.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="image">
            <xs:annotation>
               <xs:documentation><![CDATA[Image for the browse button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="cancelImage">
            <xs:annotation>
               <xs:documentation><![CDATA[Image for the cancel icon.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the browse button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the browse button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="allowTypes">
            <xs:annotation>
               <xs:documentation><![CDATA[File extensions that can be accepted, use a comma seperated list for more than one.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="description">
            <xs:annotation>
               <xs:documentation><![CDATA[Label to desribe what types of files can be selected.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sizeLimit">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of maximum bytes that is allowed for a file size.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="wmode">
            <xs:annotation>
               <xs:documentation><![CDATA[wmode property of the flash object.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="customUI">
            <xs:annotation>
               <xs:documentation><![CDATA[When customUI is turned on, upload and cancel controls won't be rendered and page authors can create their own ui using client side api.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of fileUpload.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of fileUpload.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="focus">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.focus.FocusTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="for">
            <xs:annotation>
               <xs:documentation><![CDATA[Optionally specifies the exact component to set focus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="context">
            <xs:annotation>
               <xs:documentation><![CDATA[The root component to start first input search. Default is whole document.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minSeverity">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum severity level to be used when finding the first invalid component, default is 'error'. Valid values are 'info','warn','error' and 'fatal'.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="gmap">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.gmap.GMapTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="model">
            <xs:annotation>
               <xs:documentation><![CDATA[An org.primefaces.model.map.MapModel instance.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of datagrid.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of datagrid.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="type" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Type of the map.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="center" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Center point of the map.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="zoom" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines zoom level.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onOverlaySelectUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies component(s) to update after ajax overlay selection.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onOverlaySelectStart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript callback to execute when ajax request to overlay selection starts.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onOverlaySelectComplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript callback to execute when ajax request to overlay selection completes.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="overlaySelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Server side listener to invoke when an overlay is selected with ajax.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="stateChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Server side listener to invoke when map state is changed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onStateChangeUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies component(s) to update after map state is changed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pointSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Server side listener to invoke when a point in map is selected.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onPointSelectUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies component(s) to update after when a map point is selected.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="markerDragListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Server side listener to invoke when a marker is dragged.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onMarkerDragUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies component(s) to update after when a marker is dragged.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="streetView">
            <xs:annotation>
               <xs:documentation><![CDATA[Enables street view support when set to true.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disableDefaultUI">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables default UI controls.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="navigationControl">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines visibility of navigation control.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="mapTypeControl">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines visibility of map type control.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="draggable">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to false, map cannot be dragged.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disableDoubleClickZoom">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables zooming on map on double click.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onPointClick">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript callback to execute when a point in map is clicked.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="gmapInfoWindow">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.gmap.GMapInfoWindowTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Max width of the info window.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="graphicImage">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.graphicimage.GraphicImageTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value referencing to the data of the image]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alt">
            <xs:annotation>
               <xs:documentation><![CDATA[Alternate text for the image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="url">
            <xs:annotation>
               <xs:documentation><![CDATA[Used to refer to a non dynamic data.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Title of the image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dir">
            <xs:annotation>
               <xs:documentation><![CDATA[Direction of the text displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lang">
            <xs:annotation>
               <xs:documentation><![CDATA[Language code.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ismap">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies to use a server-side image map.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="usemap">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the client side map.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[onclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ondblclick">
            <xs:annotation>
               <xs:documentation><![CDATA[ondblclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeydown">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeydown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeypress">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeypress dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeyup">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeyup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousedown">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousedown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousemove">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousemove dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseout">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseout dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseover">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseover dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseup">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="cache">
            <xs:annotation>
               <xs:documentation><![CDATA[Controls caching behavior of browsers]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="graphicText">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.graphictext.GraphicTextTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Text value that will be rendered as an image]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alt">
            <xs:annotation>
               <xs:documentation><![CDATA[Alternate text for the image]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="fontName" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the font.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="fontStyle">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the font. Values are bold, italic, plain]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="fontSize">
            <xs:annotation>
               <xs:documentation><![CDATA[Size of the font]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Title of the image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[onclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ondblclick">
            <xs:annotation>
               <xs:documentation><![CDATA[ondblclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeydown">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeydown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeypress">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeypress dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeyup">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeyup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousedown">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousedown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousemove">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousemove dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseout">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseout dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseover">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseover dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseup">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="growl">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.growl.GrowlTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sticky">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if the message should stay instead of hidden automatically.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showSummary">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if the summary of the FacesMessage should be displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showDetail">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if the detail of the FacesMessage should be displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="globalOnly">
            <xs:annotation>
               <xs:documentation><![CDATA[When true, only facesmessages with no clientIds are displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="life">
            <xs:annotation>
               <xs:documentation><![CDATA[Duration to display a non-sticky message.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="warnIcon">
            <xs:annotation>
               <xs:documentation><![CDATA[Image for the warning messages.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="infoIcon">
            <xs:annotation>
               <xs:documentation><![CDATA[Image for the info messages.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="errorIcon">
            <xs:annotation>
               <xs:documentation><![CDATA[Image for the error messages.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="fatalIcon">
            <xs:annotation>
               <xs:documentation><![CDATA[Image for the fatal messages.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="hotkey">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.hotkey.HotkeyTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="actionListener">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="action">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="bind" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[The key binding.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="process">
            <xs:annotation>
               <xs:documentation><![CDATA[Comma seperated list of clientIds that will be processed partially in JSF lifecycle instead of the whole component tree.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="handler">
            <xs:annotation>
               <xs:documentation><![CDATA[The javascript event which will be performed when there is a event with the specific]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onstart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called before ajax request begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onerror">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request fails.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onsuccess">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request succeeds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="global">
            <xs:annotation>
               <xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="async">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, ajax requests will not be queued.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="idleMonitor">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.idlemonitor.IdleMonitorTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="timeout">
            <xs:annotation>
               <xs:documentation><![CDATA[Time to wait until deciding if the user is idle in terms of milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onidle">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function to execute when user goes idle]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onactive">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function to execute when user goes active]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="idleListener">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="imageCompare">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.imagecompare.ImageCompareTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="leftImage">
            <xs:annotation>
               <xs:documentation><![CDATA[Source of the image placed on the left side.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rightImage">
            <xs:annotation>
               <xs:documentation><![CDATA[Source of the image placed on the right side.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the images.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the images.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="imageCropper">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.imagecropper.ImageCropperTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="image">
            <xs:annotation>
               <xs:documentation><![CDATA[Path of the image to be cropped]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="imageSwitch">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.imageswitch.ImageSwitchTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Effect to be used for switching]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="speed">
            <xs:annotation>
               <xs:documentation><![CDATA[Transition speed in terms of milliseconds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="slideshowSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Slideshow speed in terms of milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="slideshowAuto">
            <xs:annotation>
               <xs:documentation><![CDATA[Starts slideshow automatically]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="inplace">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.inplace.InplaceTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="label">
            <xs:annotation>
               <xs:documentation><![CDATA[Label to be displayed in display mode.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Effect to be used when displaying the hidden content.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed of the effect.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Prevents the hidden content to be shown.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="inputMask">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.inputmask.InputMaskTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="accesskey">
            <xs:annotation>
               <xs:documentation><![CDATA[Html accesskey attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alt">
            <xs:annotation>
               <xs:documentation><![CDATA[Html alt attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dir">
            <xs:annotation>
               <xs:documentation><![CDATA[Html dir attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Html disabled attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lang">
            <xs:annotation>
               <xs:documentation><![CDATA[Html lang attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxlength">
            <xs:annotation>
               <xs:documentation><![CDATA[Html maxlength attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onblur">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onblur attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onchange">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onchange attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onclick attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ondblclick">
            <xs:annotation>
               <xs:documentation><![CDATA[Html ondblclick attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onfocus">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onfocus attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeydown">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeydown attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeypress">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeypress attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeyup">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeyup attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousedown">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmousedown attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousemove">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmousemove attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseout">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseout attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseover">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseover attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseup">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseup attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselect">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onselect attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="readonly">
            <xs:annotation>
               <xs:documentation><![CDATA[Html readonly attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="size">
            <xs:annotation>
               <xs:documentation><![CDATA[Html size attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Html style attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Html class attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tabindex">
            <xs:annotation>
               <xs:documentation><![CDATA[Html tabindex attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Html title attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="mask" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Masked input for seperating input texts with given pattern.<br/>These mask definitions can be used: <ul><li>a - Represents an alpha character (A-Z,a-z)</li><li> 9 - Represents a numeric character (0-9)</li><li>* - Represents an alphanumeric character (A-Z,a-z,0-9)</li></ul>]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="placeHolder">
            <xs:annotation>
               <xs:documentation><![CDATA[Seperator and placeholder in input.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="keyboard">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.keyboard.KeyboardTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="accesskey">
            <xs:annotation>
               <xs:documentation><![CDATA[Html accesskey attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alt">
            <xs:annotation>
               <xs:documentation><![CDATA[Html alt attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dir">
            <xs:annotation>
               <xs:documentation><![CDATA[Html dir attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Html disabled attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lang">
            <xs:annotation>
               <xs:documentation><![CDATA[Html lang attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxlength">
            <xs:annotation>
               <xs:documentation><![CDATA[Html maxlength attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onblur">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onblur attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onchange">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onchange attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onclick attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ondblclick">
            <xs:annotation>
               <xs:documentation><![CDATA[Html ondblclick attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onfocus">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onfocus attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeydown">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeydown attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeypress">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeypress attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeyup">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeyup attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousedown">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmousedown attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousemove">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmousemove attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseout">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseout attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseover">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseover attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseup">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseup attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselect">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onselect attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="readonly">
            <xs:annotation>
               <xs:documentation><![CDATA[Html readonly attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="size">
            <xs:annotation>
               <xs:documentation><![CDATA[Html size attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Html style attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Html class attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tabindex">
            <xs:annotation>
               <xs:documentation><![CDATA[Html tabindex attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Html title attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="password">
            <xs:annotation>
               <xs:documentation><![CDATA[Displays a password text when enabled.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showMode">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the display mode, 'focus','button','both'.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="buttonImage">
            <xs:annotation>
               <xs:documentation><![CDATA[Image of the button trigger that displays the keyboard.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="buttonImageOnly">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true only image of the button is displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Effect of the display animation.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Length of the display animation.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="layout">
            <xs:annotation>
               <xs:documentation><![CDATA[Layout the of the keyboard, can be 'qwerty','alphabetic' or custom.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="layoutTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Template of the custom layout.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="keypadOnly">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, a keypad will be displayed instead of the whole keyboard.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="promptLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label for the prompt text.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closeLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label for the close key.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="clearLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label for the clear key.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="backspaceLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label for the backspace key.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="layout">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.layout.LayoutTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="fullPage">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if the layout will be created for whole page.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to container element. This is only applicable for element based layouts.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to container element. This is only applicable for element based layouts.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closeTitle">
            <xs:annotation>
               <xs:documentation><![CDATA[Title label for the close button of closable units.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collapseTitle">
            <xs:annotation>
               <xs:documentation><![CDATA[Title label for the collapse button of collapsible units.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expandTitle">
            <xs:annotation>
               <xs:documentation><![CDATA[Title label for the expande button of collapsible units.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to process a CloseEvent]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onCloseUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update after ajax closeListener is processed and unit is closed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="toggleListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to process a ToggleEvent]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onToggleUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update after ajax toggleListener is processed and unit is toggled]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="resizeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to process a ResizeEvent]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onResizeUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update after ajax resizelistener is processed and unit is resized]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onResizeComplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side callback to invoke after resizeListener is invoked.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onCloseComplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side callback to invoke after closeListener is invoked.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onToggleComplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side callback to invoke after toggleListener is invoked.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="layoutUnit">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.layout.LayoutUnitTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="position" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Position of the unit, can be "top","bottom","center","left","right".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the unit in pixels, applies to left and right units.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the unit in pixels, applies to top and bottom units.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="resizable">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes the unit resizable.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closable">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes the unit closable.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collapsible">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes the unit collapsible.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="scrollable">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes the unit closable.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="header">
            <xs:annotation>
               <xs:documentation><![CDATA[Text for header.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="footer">
            <xs:annotation>
               <xs:documentation><![CDATA[Footer for header.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum width boundary in resizing.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum width boundary in resizing.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minHeight">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum Maximum height boundary in resizing. boundary in resizing.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxHeight">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum height boundary in resizing.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="gutter">
            <xs:annotation>
               <xs:documentation><![CDATA[Gutter of the layout unit.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="zindex">
            <xs:annotation>
               <xs:documentation><![CDATA[zindex property to control overlapping with other elements]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="visible">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies visibility of unit.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collapsed">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies toggle status of unit.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="proxyResize">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines the resize preview mode.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collapseSize">
            <xs:annotation>
               <xs:documentation><![CDATA[Size of the unit when collapsed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="lightBox">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.lightbox.LightBoxTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the container element, not the overlay container.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of container element, not the overlay container.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="transition">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the transition effect. Valid values are 'elastic','fade' and 'none'. Defaults to 'elastic'.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="speed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed of the transition effect in milliseconds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the overlay.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the overlay.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="iframe">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies an iframe to display an external url in overlay. Turned off by default.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="opacity">
            <xs:annotation>
               <xs:documentation><![CDATA[Level of overlay opacity between 0 and 1.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="visible">
            <xs:annotation>
               <xs:documentation><![CDATA[Displays lightbox without requiring any user interaction by default.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="slideshow">
            <xs:annotation>
               <xs:documentation><![CDATA[Displays lightbox without requiring any user interaction by default.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="slideshowSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed for slideshow in milliseconds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="slideshowStartText">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of slideshow start text.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="slideshowStopText">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of slideshow stop text.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="slideshowAuto">
            <xs:annotation>
               <xs:documentation><![CDATA[Starts slideshow automatically.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="currentTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Text template for current image display like "1 of 3". Default is "{current} of {total}".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="overlayClose">
            <xs:annotation>
               <xs:documentation><![CDATA[When true clicking outside of overlay will close lightbox.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="group">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines grouping, by default children belong to same group and switching is enabled.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="lineChart">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.chart.line.LineChartTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Data to be displayed on the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the data iterator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="xfield">
            <xs:annotation>
               <xs:documentation><![CDATA[Field for the x axis]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to chart container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript object that represents the chart style]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="wmode">
            <xs:annotation>
               <xs:documentation><![CDATA[wmode property of the flash object.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="live">
            <xs:annotation>
               <xs:documentation><![CDATA[When a chart is live, the data is refreshed based on the refreshInterval]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event to be called when ajax request for item select event is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="refreshInterval">
            <xs:annotation>
               <xs:documentation><![CDATA[Refresh period of a live chart data in milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen chart series item select events]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minY">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum boundary value of y axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxY">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum boundary value of y axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="titleX">
            <xs:annotation>
               <xs:documentation><![CDATA[Title of the x-axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="titleY">
            <xs:annotation>
               <xs:documentation><![CDATA[Title of the y-axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="labelFunctionX">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function to format x-axis labels.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="labelFunctionY">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function to format y-axis labels.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dataTipFunction">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function name to customize the data tips.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="linkButton">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.linkbutton.LinkButtonTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="href">
            <xs:annotation>
               <xs:documentation><![CDATA[Href value to navigate]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="target">
            <xs:annotation>
               <xs:documentation><![CDATA[String specifying the target for the button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="image">
            <xs:annotation>
               <xs:documentation><![CDATA[Image of the button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to the button element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class to apply to the button element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onblur">
            <xs:annotation>
               <xs:documentation><![CDATA[onblur dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onchange">
            <xs:annotation>
               <xs:documentation><![CDATA[onchange dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[onclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ondblclick">
            <xs:annotation>
               <xs:documentation><![CDATA[ondblclick dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onfocus">
            <xs:annotation>
               <xs:documentation><![CDATA[onfocus dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeydown">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeydown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeypress">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeypress dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeyup">
            <xs:annotation>
               <xs:documentation><![CDATA[onkeyup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousedown">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousedown dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousemove">
            <xs:annotation>
               <xs:documentation><![CDATA[onmousemove dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseout">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseout dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseover">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseover dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseup">
            <xs:annotation>
               <xs:documentation><![CDATA[onmouseup dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselect">
            <xs:annotation>
               <xs:documentation><![CDATA[onselect dom event handler]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="media">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.media.MediaTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[URL referring to the media to be played.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="player">
            <xs:annotation>
               <xs:documentation><![CDATA[Type of the player.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="menu">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.menu.MenuTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="model">
            <xs:annotation>
               <xs:documentation><![CDATA[An org.primefaces.model.MenuModel instance to build menu dynamically.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="visible">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the menu's visibility, true by default]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="x">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the element's "left" style property. Only applies to "dynamic" menus]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="y">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the element's "top" style property. Only applies to "dynamic" menus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="fixedCenter">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies whether the component
				should be automatically centered in the viewport on window scroll and resize. Only applies to "dynamic" menus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="constraintToViewport">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean indicating if the Menu will try to remain inside the boundaries of the size of viewport. Only applies to "dynamic" menus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="position">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the way menu is placed on the page, when "static" menu is displayed in the normal flow, when set to "dynamic" menu is not on the normal flow
				allowing overlaying. Default value is "static".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="clickToHide">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the behavior when outside of the menu is clicked, default is false. Only applies to "dynamic" menus]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="keepOpen">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the behavior when menu is clicked, default is true. Only applies to "dynamic" menus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tiered">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the tiered mode, when set to true menu will be rendered in different tiers, default is false. Only applies to "dynamic" menus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the effect for the menu display, default value is FADE. Possible values are "FADE", "SLIDE", "NONE". Use "NONE" to disable animation at all.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the effect for the menu display]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="autoSubmenuDisplay">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, submenus are displayed on mouseover of a menuitem.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showDelay">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the duration in milliseconds before a submenu is displayed. Only applies to "dynamic" menus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="hideDelay">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the duration in milliseconds before a menu is hidden Only applies to "dynamic" menus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="submenuHideDelay">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the duration in milliseconds before a submenu is hidden. Only applies to "dynamic" menus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="context">
            <xs:annotation>
               <xs:documentation><![CDATA[Arguments for context sensitive positioning.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="zindex">
            <xs:annotation>
               <xs:documentation><![CDATA[zindex property to control overlapping with other elements]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="menubar">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.menubar.MenubarTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="model">
            <xs:annotation>
               <xs:documentation><![CDATA[An org.primefaces.model.MenuModel instance to build menu dynamically.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="autoSubmenuDisplay">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, submenus are displayed on mouseover of a menuitem.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the effect for the menu display, default value is "FADE". Possible values are "FADE", "SLIDE", "NONE". Use "NONE" to disable animation at all.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Sets the effect for the menu display]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="zindex">
            <xs:annotation>
               <xs:documentation><![CDATA[zindex property to control overlapping with other elements]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="menuButton">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.menubutton.MenuButtonTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="model">
            <xs:annotation>
               <xs:documentation><![CDATA[An org.primefaces.model.MenuModel instance to build menu dynamically.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disabled or enables the button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="menuitem">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.menuitem.MenuItemTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="actionListener">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="action">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="url">
            <xs:annotation>
               <xs:documentation><![CDATA[URL that will be navigated to when the menu item is selected]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="target">
            <xs:annotation>
               <xs:documentation><![CDATA[Target element of the menuitem's anchor element]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="helpText">
            <xs:annotation>
               <xs:documentation><![CDATA[Help text of the menuitem]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the menuitem label]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the menuitem label]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript onclick event handler for menuitem.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after ajax request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="process">
            <xs:annotation>
               <xs:documentation><![CDATA[Comma seperated list of clientIds that will be processed partially in JSF lifecycle instead of the whole component tree.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onstart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called before ajax request begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onerror">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request fails.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onsuccess">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request succeeds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="global">
            <xs:annotation>
               <xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="async">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, ajax requests will not be queued.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ajax">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the submit mode, when set to true(default), submit would be made with Ajax.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="icon">
            <xs:annotation>
               <xs:documentation><![CDATA[Path of the meuitem image.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="message">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.message.MessageTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showSummary">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if the summary of the FacesMessage should be displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showDetail">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if the detail of the FacesMessage should be displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="for">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component whose messages to display.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="redisplay">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if already rendered messages should be rendered.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="messages">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.messages.MessagesTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showSummary">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if the summary of the FacesMessage should be displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showDetail">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if the detail of the FacesMessage should be displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="globalOnly">
            <xs:annotation>
               <xs:documentation><![CDATA[When true, only facesmessages with no clientIds are displayed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="redisplay">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if already rendered messages should be rendered.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="notificationBar">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.notificationbar.NotificationBarTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the container element, not the overlay container.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of container element, not the overlay container.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="position">
            <xs:annotation>
               <xs:documentation><![CDATA[Position of the bar, "bottom" or "top".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the effect, valid values are "slide", "fade" and "none".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed of the effect. "slow", "normal" or "fast";]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="autoDisplay">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, notification bar will be displayed when page is loaded.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="outputPanel">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.outputpanel.OutputPanelTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the panel]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[StyleClass of the panel]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="layout">
            <xs:annotation>
               <xs:documentation><![CDATA[Layout of the panel, valid values are 'inline'(span) and 'block'(div).]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="panel">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.panel.PanelTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="header">
            <xs:annotation>
               <xs:documentation><![CDATA[Header text of the panel]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="footer">
            <xs:annotation>
               <xs:documentation><![CDATA[Footer text of the panel]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="toggleable">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes the panel toggleable, places a toggle icon for user interaction]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="toggleSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Durating of toggling in milliseconds. Default is 1000.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collapsed">
            <xs:annotation>
               <xs:documentation><![CDATA[Renders a toggleable panel as collapsed by default.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closable">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes the panel closable, places a close icon for user interaction]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to process a CloseEvent]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onCloseUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update after ajax closeListener is processed and panel is closed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onCloseStart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be triggered before a panel is closed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onCloseComplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be triggered after a panel is closed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closeSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Durating of closing in milliseconds. Default is 1000.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="visible">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies visibility of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onToggleUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update after ajax toggleListener is processed and panel is toggled]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="toggleListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to process a CloseEvent]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="password">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.password.PasswordTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="accesskey">
            <xs:annotation>
               <xs:documentation><![CDATA[Html accesskey attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alt">
            <xs:annotation>
               <xs:documentation><![CDATA[Html alt attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dir">
            <xs:annotation>
               <xs:documentation><![CDATA[Html dir attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Html disabled attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lang">
            <xs:annotation>
               <xs:documentation><![CDATA[Html lang attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxlength">
            <xs:annotation>
               <xs:documentation><![CDATA[Html maxlength attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onblur">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onblur attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onchange">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onchange attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onclick attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ondblclick">
            <xs:annotation>
               <xs:documentation><![CDATA[Html ondblclick attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onfocus">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onfocus attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeydown">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeydown attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeypress">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeypress attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeyup">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeyup attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousedown">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmousedown attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousemove">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmousemove attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseout">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseout attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseover">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseover attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseup">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseup attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselect">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onselect attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="readonly">
            <xs:annotation>
               <xs:documentation><![CDATA[Html readonly attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="size">
            <xs:annotation>
               <xs:documentation><![CDATA[Html size attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Html style attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Html class attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tabindex">
            <xs:annotation>
               <xs:documentation><![CDATA[Html tabindex attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Html title attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minLength" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum length of a good password.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="inline">
            <xs:annotation>
               <xs:documentation><![CDATA[Displays feedback inline rather than using a popup.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="promptLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of prompt]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="level">
            <xs:annotation>
               <xs:documentation><![CDATA[Level of security]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="weakLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of weak password]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="goodLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of good password]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="strongLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of good password]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onshow">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be executed when password strength indicator is shown.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onhide">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be executed when password strength indicator is hidden.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="autocomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if browser should autocomplete the input field.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="pickList">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.picklist.PickListTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var">
            <xs:annotation>
               <xs:documentation><![CDATA[Variable name of the iterator.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the item.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemValue">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the item.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of picklist.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of picklist.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="pieChart">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.chart.pie.PieChartTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Data to be displayed on the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the data iterator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="categoryField">
            <xs:annotation>
               <xs:documentation><![CDATA[Pie category field]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dataField">
            <xs:annotation>
               <xs:documentation><![CDATA[Pie category date field]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class to apply to chart container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript object that represents the chart style]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="seriesStyle">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript object that represents the chart series style]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="wmode">
            <xs:annotation>
               <xs:documentation><![CDATA[wmode property of the flash object.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="live">
            <xs:annotation>
               <xs:documentation><![CDATA[When a chart is live, the data is refreshed based on the refreshInterval]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="refreshInterval">
            <xs:annotation>
               <xs:documentation><![CDATA[Refresh period of a live chart data in milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event to be called when ajax request for item select event is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen chart series item select events]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dataTipFunction">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function name to customize the data tips.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="poll">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.poll.PollTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="interval">
            <xs:annotation>
               <xs:documentation><![CDATA[Interval in seconds to do periodic ajax requests.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="actionListener">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="action">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onstart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event to be called before ajax request begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event to be called when ajax request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="process">
            <xs:annotation>
               <xs:documentation><![CDATA[Comma seperated list of clientIds that will be processed partially in JSF lifecycle instead of the whole component tree.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onerror">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request fails.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onsuccess">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request succeeds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="global">
            <xs:annotation>
               <xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="async">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, ajax requests will not be queued.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="autoStart">
            <xs:annotation>
               <xs:documentation><![CDATA[In autoStart mode, polling starts automatically on page load, to start polling on demand set to false.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="printer">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.printer.PrinterTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="target">
            <xs:annotation>
               <xs:documentation><![CDATA[Server side id of a JSF component to print.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="progressBar">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.progressbar.ProgressBarTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the progressbar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables or enables progressbar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ajax">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the mode of progressBar, in ajax mode progress value is retrieved from a backing bean. Defaults to false which is pure client side progressBar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="interval">
            <xs:annotation>
               <xs:documentation><![CDATA[Interval in seconds to do periodic requests in ajax mode.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of progressBar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of progressBar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onCompleteUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the component(s) to update with ajax after progress is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="completeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to invoke when progress is completed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onCancelUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the component(s) to update with ajax after progress is cancelled.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="cancelListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to invoke when progress is cancelled]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="push">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.push.PushTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="channel" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Unique channel name of the connection between subscriber and the server.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onpublish" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler that is process when the server publishes data.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="rating">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.rating.RatingTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="stars">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of stars to display.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rateListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to process a RateEvent]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables the user interaction, used for displaying the value only.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="remoteCommand">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.remotecommand.RemoteCommandTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="actionListener">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="action">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="name">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the command.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="process">
            <xs:annotation>
               <xs:documentation><![CDATA[Comma seperated list of clientIds that will be processed partially in JSF lifecycle instead of the whole component tree.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onstart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called before ajax request begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onerror">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request fails.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onsuccess">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called when ajax request succeeds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="global">
            <xs:annotation>
               <xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="async">
            <xs:annotation>
               <xs:documentation><![CDATA[When set to true, ajax requests will not be queued.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="resizable">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.resizable.ResizableTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="proxy">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes the resizable use a proxy]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="status">
            <xs:annotation>
               <xs:documentation><![CDATA[Shows the height and width of the resizing component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="handles">
            <xs:annotation>
               <xs:documentation><![CDATA[Handles to use, any combination of 't', 'b', 'r', 'l', 'bl', 'br', 'tl', 'tr' is valid, shortcut "all" enables all handlers.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ghost">
            <xs:annotation>
               <xs:documentation><![CDATA[Displays a ghost effect.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="knobHandles">
            <xs:annotation>
               <xs:documentation><![CDATA[Displays smaller handles]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="animate">
            <xs:annotation>
               <xs:documentation><![CDATA[Displays a ghost effect.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Animation effect.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="animateDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Duration of the animation.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum width of the resizable]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxHeight">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum height of the resizable]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum width of the resizable]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minHeight">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum height of the resizable]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="resource">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.resource.ResourceTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="name">
            <xs:annotation>
               <xs:documentation><![CDATA[Path of the resource to be exluded.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="resources">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.resources.ResourcesTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="exclude">
            <xs:annotation>
               <xs:documentation><![CDATA[Comma seperated list of resources to exclude.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="schedule">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.schedule.ScheduleTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[An org.primefaces.model.ScheduleModel instance representing the backed model.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="locale">
            <xs:annotation>
               <xs:documentation><![CDATA[Locale for localization, can be String or a java.util.Locale instance.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="aspectRatio">
            <xs:annotation>
               <xs:documentation><![CDATA[Ratio of calendar width to height, higher the value shorter the height is.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="view">
            <xs:annotation>
               <xs:documentation><![CDATA[The view type to use, possible values are 'month', 'agendaDay', 'agendaWeek', 'basicWeek', 'basicDay'.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="initialDate">
            <xs:annotation>
               <xs:documentation><![CDATA[The initial date that is used when schedule loads. If ommitted, the schedule starts on the current date.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showWeekends">
            <xs:annotation>
               <xs:documentation><![CDATA[Whether to include Saturday/Sunday columns in any of the views.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container element of schedule.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container element of schedule.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="editable">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines whether calendar can be modified.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="draggable">
            <xs:annotation>
               <xs:documentation><![CDATA[When true, events are draggable.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="resizable">
            <xs:annotation>
               <xs:documentation><![CDATA[When true, events are resizable.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="eventSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to invoke when an event is selected.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dateSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to invoke when a date is selected.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="eventMoveListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to invoke when an entry is moved.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="eventResizeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to invoke when an event is resized.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onEventSelectUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update with ajax after an event is select, by default schedule event dialog is updated.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onDateSelectUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update with ajax after an empty date is select, by default schedule event dialog is updated.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onEventMoveUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update with ajax after an event is moved]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onEventResizeUpdate">
            <xs:annotation>
               <xs:documentation><![CDATA[Id(s) of components to update with ajax after an event is resized]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showHeader">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies visibility of header content.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="leftHeaderTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Content of left side of header.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="centerHeaderTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Content of header center.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rightHeaderTemplate">
            <xs:annotation>
               <xs:documentation><![CDATA[Content of right side of header.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="allDaySlot">
            <xs:annotation>
               <xs:documentation><![CDATA[Determines if all-day slot will be displayed in agendaWeek or agendaDay views.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="slotMinutes">
            <xs:annotation>
               <xs:documentation><![CDATA[Interval in minutes in an hour to create a slot.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="firstHour">
            <xs:annotation>
               <xs:documentation><![CDATA[First hour to display in day view.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minTime">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum time to display in a day view.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxTime">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum time to display in a day view.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="startWeekday">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies first day of week, by default it's 0 corresponding to sunday]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="scheduleEventDialog">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.schedule.ScheduleEventDialogTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="header">
            <xs:annotation>
               <xs:documentation><![CDATA[Header text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="sheet">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.spreadsheet.SheetTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the request-scoped variable that'll be used as the holder of each rowdata before processing a row]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rows">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of rows to display per page]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="first">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the first row to be displayed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Title text of the sheet]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="slider">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.slider.SliderTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="for">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component that the slider will be used for.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="display">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component to display the slider value.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minValue">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum value of the slider]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxValue">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum value of the slider]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="animate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to set an animation when slider background is clicked, default is true]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="type">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the type of the slider, valid values are "horizontal" and "vertical".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="step">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines the amount of each step.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Disables or enables slider.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="spinner">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.spinner.SpinnerTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="immediate">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that specifies the lifecycle phase the
		valueChangeEvents should be processed, when true the events will
		be fired at "apply request values", if immediate is set to
		false, valueChangeEvents are fired in "process validations"
		phase. Default is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value that makes the component required, default value
		is false]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validator">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		validating the input]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="valueChangeListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A method binding EL expression that refers to a method for
		handling a value change event]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when required field validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converterMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when conversion fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validatorMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Message to be displayed when validation fails]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="accesskey">
            <xs:annotation>
               <xs:documentation><![CDATA[Html accesskey attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alt">
            <xs:annotation>
               <xs:documentation><![CDATA[Html alt attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dir">
            <xs:annotation>
               <xs:documentation><![CDATA[Html dir attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disabled">
            <xs:annotation>
               <xs:documentation><![CDATA[Html disabled attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lang">
            <xs:annotation>
               <xs:documentation><![CDATA[Html lang attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxlength">
            <xs:annotation>
               <xs:documentation><![CDATA[Html maxlength attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onblur">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onblur attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onchange">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onchange attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onclick">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onclick attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ondblclick">
            <xs:annotation>
               <xs:documentation><![CDATA[Html ondblclick attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onfocus">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onfocus attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeydown">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeydown attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeypress">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeypress attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onkeyup">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onkeyup attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousedown">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmousedown attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmousemove">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmousemove attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseout">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseout attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseover">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseover attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onmouseup">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onmouseup attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselect">
            <xs:annotation>
               <xs:documentation><![CDATA[Html onselect attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="readonly">
            <xs:annotation>
               <xs:documentation><![CDATA[Html readonly attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="size">
            <xs:annotation>
               <xs:documentation><![CDATA[Html size attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Html style attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Html class attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tabindex">
            <xs:annotation>
               <xs:documentation><![CDATA[Html tabindex attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Html title attribute of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="stepFactor">
            <xs:annotation>
               <xs:documentation><![CDATA[Stepping factor for each increment and decrement]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="min">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum boundary value]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="max">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum boundary value]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="prefix">
            <xs:annotation>
               <xs:documentation><![CDATA[Prefix of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="suffix">
            <xs:annotation>
               <xs:documentation><![CDATA[Suffix of the input text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showOn">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines when spinner buttons would be available]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines the width of the buttons]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="spreadsheet">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.spreadsheet.SpreadsheetTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title">
            <xs:annotation>
               <xs:documentation><![CDATA[Title text of the spreadsheet]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="editable">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines if display is editable or readonly]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="columnWidth">
            <xs:annotation>
               <xs:documentation><![CDATA[Global setting to define common width for each column in pixels]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="stack">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.stack.StackTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="model">
            <xs:annotation>
               <xs:documentation><![CDATA[An org.primefaces.model.MenuModel instance to build menu dynamically.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="icon">
            <xs:annotation>
               <xs:documentation><![CDATA[An optional image to contain stacked items.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="openSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed of animation when opening the stack.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="closeSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed of animation when opening the stack.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="stackedBarChart">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.chart.stackedbar.StackedBarChartTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Data to be displayed on the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the data iterator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="yfield">
            <xs:annotation>
               <xs:documentation><![CDATA[Field for the y axis]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to chart container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript object that represents the chart style]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="wmode">
            <xs:annotation>
               <xs:documentation><![CDATA[wmode property of the flash object.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="live">
            <xs:annotation>
               <xs:documentation><![CDATA[When a chart is live, the data is refreshed based on the refreshInterval]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event to be called when ajax request for item select event is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="refreshInterval">
            <xs:annotation>
               <xs:documentation><![CDATA[Refresh period of a live chart data in milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen chart series item select events]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minX">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum boundary value of x axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxX">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum boundary value of x axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dataTipFunction">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function name to customize the data tips.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="stackedColumnChart">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.chart.stackedcolumn.StackedColumnChartTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Data to be displayed on the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the data iterator]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="xfield">
            <xs:annotation>
               <xs:documentation><![CDATA[Field for the x axis]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to chart container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript object that represents the chart style]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="wmode">
            <xs:annotation>
               <xs:documentation><![CDATA[wmode property of the flash object.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="live">
            <xs:annotation>
               <xs:documentation><![CDATA[When a chart is live, the data is refreshed based on the refreshInterval]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="oncomplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event to be called when ajax request for item select event is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="refreshInterval">
            <xs:annotation>
               <xs:documentation><![CDATA[Refresh period of a live chart data in milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="itemSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen chart series item select events]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the chart]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="minY">
            <xs:annotation>
               <xs:documentation><![CDATA[Minimum boundary value of y axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxY">
            <xs:annotation>
               <xs:documentation><![CDATA[Maximum boundary value of y axis.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dataTipFunction">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript function name to customize the data tips.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="submenu">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.submenu.SubmenuTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="label">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the submenu header]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="labelStyle">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the submenu label]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="labelStyleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the submenu label]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="tab">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.tabview.TabTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="title" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Title of the tab]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="tabSlider">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.tabslider.TabSliderTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="activeIndex">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the active tab, count starts from 1.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Easing animation type used for slide effect. Default is easeInOutExpo.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Duration of slide effect in milliseconds.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="navigator">
            <xs:annotation>
               <xs:documentation><![CDATA[Enables the tab name navigation.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style to apply to main container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[StyleClass to apply to main container element.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="tabView">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.tabview.TabViewTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="activeIndex">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the active tab]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Applies a transition effect during changing the tabs. Valid values are 'opacity', 'height' and 'width'.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectDuration">
            <xs:annotation>
               <xs:documentation><![CDATA[Defines the duration of effect]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dynamic">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the toggleMode, dynamic setting fetches it's content with ajax on tab switch.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="cache">
            <xs:annotation>
               <xs:documentation><![CDATA[When tab contents are lazy loaded by ajax toggleMode, caching only retrieves the tab contents once and subsequent toggles of a cached tab
			does not communicate with server. If caching is turned off, tab contents are refetched from server each time tab is clicked. This setting is true by default.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collapsible">
            <xs:annotation>
               <xs:documentation><![CDATA[An active tab can be collapsed onclick when collapsible option is enabled]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="event">
            <xs:annotation>
               <xs:documentation><![CDATA[Event to use when selecting a tab]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="terminal">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.terminal.TerminalTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the terminal.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the terminal.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="welcomeMessage">
            <xs:annotation>
               <xs:documentation><![CDATA[Welcome message to be displayed on initial terminal load.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="prompt">
            <xs:annotation>
               <xs:documentation><![CDATA[Primary prompt text.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="commandHandler">
            <xs:annotation>
               <xs:documentation><![CDATA[Method to be called with arguments to process a command]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="themeSwitcher">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.themeswitcher.ThemeSwitcherTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="theme">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of initial theme to load]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="width">
            <xs:annotation>
               <xs:documentation><![CDATA[Width of the switcher menu]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="height">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of the switcher menu]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="buttonHeight">
            <xs:annotation>
               <xs:documentation><![CDATA[Height of switcher button]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="initialText">
            <xs:annotation>
               <xs:documentation><![CDATA[Text of switcher button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="buttonPreText">
            <xs:annotation>
               <xs:documentation><![CDATA[Text that precedes the theme name.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="tooltip">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.tooltip.TooltipTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a
		literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="converter">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression or a literal text that defines a converter for
		the component. When it's an EL expression, it's resolved to a
		converter instance. In case it's a static text, it must refer to
		a converter id]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="global">
            <xs:annotation>
               <xs:documentation><![CDATA[Makes tooltip global which uses title attributes of elements in page to create
			the tooltip.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="targetPosition">
            <xs:annotation>
               <xs:documentation><![CDATA[The corner of the target element by which to position the tooltip by.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="position">
            <xs:annotation>
               <xs:documentation><![CDATA[The corner of the tooltip to position in relation to the above targets corner.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showEvent">
            <xs:annotation>
               <xs:documentation><![CDATA[The mouse event that the tooltip will be displayed, default is mouseover.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showDelay">
            <xs:annotation>
               <xs:documentation><![CDATA[The delay time of the tooltip display in milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showEffect">
            <xs:annotation>
               <xs:documentation><![CDATA[The show effect of the tooltip]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showEffectLength">
            <xs:annotation>
               <xs:documentation><![CDATA[Duration to display the show effect]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="hideEvent">
            <xs:annotation>
               <xs:documentation><![CDATA[The mouse event that the tooltip will be closed, default is mouseout.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="hideDelay">
            <xs:annotation>
               <xs:documentation><![CDATA[The delay time of the tooltip hide in milliseconds]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="hideEffect">
            <xs:annotation>
               <xs:documentation><![CDATA[The hide effect of the tooltip]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="hideEffectLength">
            <xs:annotation>
               <xs:documentation><![CDATA[Duration to display the hide effect]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the tooltip, default is blue.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="for">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component to attach the tooltip]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="forElement">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the html element to attach the tooltip]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="tree">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.tree.TreeTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[TreeNode instance to model the tree]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the request-scoped variable that'll be used as the holder of each treenode data]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dynamic">
            <xs:annotation>
               <xs:documentation><![CDATA[Dynamic trees use ajax to load nodes and non-dynamic setting creates a pure client side tree.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="cache">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies node caching for nodes loaded with ajax. When set to true(default), re-expanding a collapsed node will not do an ajax request.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expandAnim">
            <xs:annotation>
               <xs:documentation><![CDATA[Animation to be displayed on node expand, valid values are "FADE_IN" or "FADE_OUT"]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collapseAnim">
            <xs:annotation>
               <xs:documentation><![CDATA[Animation to be displayed on node collapse, valid values are "FADE_IN" or "FADE_OUT"]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="nodeSelectListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen node select events]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="nodeExpandListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen node expand events]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="nodeCollapseListener">
            <xs:annotation>
               <xs:documentation><![CDATA[Method expression to listen node collapse events]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onNodeClick">
            <xs:annotation>
               <xs:documentation><![CDATA[Event handler to execute when a tree node is clicked]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expanded">
            <xs:annotation>
               <xs:documentation><![CDATA[Determines if all nodes of the tree should be expanded initially.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="update">
            <xs:annotation>
               <xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request triggered by a node click.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselectStart">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called before ajax request for ajax node selection request begins.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onselectComplete">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be called after ajax request for node selection request is completed.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="selection">
            <xs:annotation>
               <xs:documentation><![CDATA[A TreeNode array that would be populated with the selected nodes.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="propagateSelectionUp">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if selection will be propagated up to the parents of clicked node.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="propagateSelectionDown">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies if selection will be propagated down to the children of clicked node.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="selectionMode">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies the selection mode, valid options are "single", "multiple" and "checkbox".]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="treeNode">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.tree.UITreeNodeTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="type">
            <xs:annotation>
               <xs:documentation><![CDATA[Type of the tree node.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class to apply a particular tree node type.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="treeTable">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.treetable.TreeTableTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value">
            <xs:annotation>
               <xs:documentation><![CDATA[Value of the component that can be either an EL expression or a literal text]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="var" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[Name of the request-scoped variable that'll be used as the holder of each rowdata before processing a row]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rows">
            <xs:annotation>
               <xs:documentation><![CDATA[Number of rows to display per page]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="first">
            <xs:annotation>
               <xs:documentation><![CDATA[Index of the first row to be displayed]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[Style class of the main container of panel.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="readOnly">
            <xs:annotation>
               <xs:documentation><![CDATA[When readOnly, treeTable is rendered as expanded and expand/collapse is disabled]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expanded">
            <xs:annotation>
               <xs:documentation><![CDATA[Rendered treeTable as expanded by defaul]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="watermark">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.watermark.WatermarkTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" use="required">
            <xs:annotation>
               <xs:documentation><![CDATA[The text that will be visible as watermark]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="for">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component to attach the watermark]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="forElement">
            <xs:annotation>
               <xs:documentation><![CDATA[jQuery selector to attach the watermark]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="wizard">
      <xs:annotation>
         <xs:documentation><![CDATA[]]></xs:documentation>
         <xs:documentation>tag-class: org.primefaces.component.wizard.WizardTag</xs:documentation>
         <xs:documentation>body-content: JSP</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
         </xs:choice>
         <xs:attribute name="id">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rendered">
            <xs:annotation>
               <xs:documentation><![CDATA[Boolean value to specify the visibility of the component]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="binding">
            <xs:annotation>
               <xs:documentation><![CDATA[An EL expression that maps to a server-side component instance
		in a backing bean]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="widgetVar">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript variable name of the wrapped yui widget]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="step">
            <xs:annotation>
               <xs:documentation><![CDATA[Id of the current step in flow]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="style">
            <xs:annotation>
               <xs:documentation><![CDATA[Style of the main wizard container]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleClass">
            <xs:annotation>
               <xs:documentation><![CDATA[StyleClass of the main wizard container]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="flowListener">
            <xs:annotation>
               <xs:documentation><![CDATA[A server side listener to be invoked when wizard flow is processed back or forth]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="showNavBar">
            <xs:annotation>
               <xs:documentation><![CDATA[Specifies visibility of default navigation controls in navigation bar.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onback">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be invoked when flow goes back.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="onnext">
            <xs:annotation>
               <xs:documentation><![CDATA[Javascript event handler to be invoked when flow goes next.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="nextLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the next step navigation button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="backLabel">
            <xs:annotation>
               <xs:documentation><![CDATA[Label of the back step navigation button.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effect">
            <xs:annotation>
               <xs:documentation><![CDATA[Enabled fade effect during pagination.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="effectSpeed">
            <xs:annotation>
               <xs:documentation><![CDATA[Speed of the fade effect during pagination.]]></xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
</xs:schema>